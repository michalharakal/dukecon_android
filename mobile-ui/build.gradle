apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'
apply from: '../config/git.gradle'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def javalandReleaseKeystorePropertiesFile = rootProject.file("../dukecon/dukecon_app_releases/javaland/javalandReleaseKeystore.properties")
def apexReleaseKeystorePropertiesFile = rootProject.file("../dukecon/dukecon_app_releases/apex/apexReleaseKeystore.properties")


// Initialize a new Properties() object called keystoreProperties.
def javalandReleaseKeystoreProperties = new Properties()

// Initialize a new Properties() object called keystoreProperties.
def apexReleaseKeystoreProperties = new Properties()


if (javalandReleaseKeystorePropertiesFile.canRead()) {
    // Load your keystore.properties file into the keystoreProperties object.
    javalandReleaseKeystoreProperties.load(new FileInputStream(javalandReleaseKeystorePropertiesFile))
}

if (apexReleaseKeystorePropertiesFile.canRead()) {
    // Load your keystore.properties file into the keystoreProperties object.
    apexReleaseKeystoreProperties.load(new FileInputStream(apexReleaseKeystorePropertiesFile))
}



android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        multiDexEnabled = false
        testInstrumentationRunner "org.buffer.android.boilerplate.ui.test.TestRunner"
    }

    signingConfigs {
        javalandRelease {
            keyAlias javalandReleaseKeystoreProperties['keyAlias']
            keyPassword javalandReleaseKeystoreProperties['keyPassword']
            storeFile rootProject.file("../dukecon/dukecon_app_releases/javaland/" + javalandReleaseKeystoreProperties['storeFile'])
            storePassword javalandReleaseKeystoreProperties['storePassword']
        }
        apexRelease {
            keyAlias apexReleaseKeystoreProperties['keyAlias']
            keyPassword apexReleaseKeystoreProperties['keyPassword']
            storeFile rootProject.file("../dukecon/dukecon_app_releases/apex/" + apexReleaseKeystoreProperties['storeFile'])
            storePassword apexReleaseKeystoreProperties['storePassword']
        }
        debug {
            storeFile file("debug.keystore")
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFile 'proguard-release-app.pro'
            signingConfig signingConfigs.apexRelease
        }
    }

    dexOptions {
        preDexLibraries = false
        dexInProcess = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }

    flavorDimensions "dukecon"

    productFlavors {
        javaland {
            dimension "dukecon"
            applicationIdSuffix ".javaland"

            versionCode 3
            versionName gitVersionName
        }
        apexconn {
            dimension "dukecon"
            applicationIdSuffix ".apexconnect"

            versionCode 3
            versionName gitVersionName
        }
    }
}

kapt {
    correctErrorTypes = true
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

dependencies {
    def mobileUiDependencies = rootProject.ext.mobileUiDependencies
    def mobileUiTestDependencies = rootProject.ext.mobileUiTestDependencies

    implementation project(':presentation')
    implementation project(':data')
    implementation project(':cache')
    implementation project(':remote')

    implementation mobileUiDependencies.javaxAnnotation

    implementation mobileUiDependencies.kotlin
    implementation mobileUiDependencies.javaxInject
    implementation mobileUiDependencies.rxKotlin
    implementation mobileUiDependencies.androidAnnotations
    implementation mobileUiDependencies.androidSupportV4
    implementation mobileUiDependencies.androidSupportV13
    implementation mobileUiDependencies.appCompatV7
    implementation mobileUiDependencies.appCardViewV7
    implementation mobileUiDependencies.supportRecyclerView
    implementation mobileUiDependencies.constrantLayout
    implementation mobileUiDependencies.supportDesign
    implementation mobileUiDependencies.timber
    implementation mobileUiDependencies.rxAndroid
    implementation mobileUiDependencies.picasso
    implementation mobileUiDependencies.dagger
    implementation mobileUiDependencies.daggerSupport
    implementation mobileUiDependencies.kotlinLogging
    implementation mobileUiDependencies.slf4jAndroid
    implementation mobileUiDependencies.circularView
    implementation mobileUiDependencies.firebaseCore
    implementation mobileUiDependencies.crashlytics
    implementation mobileUiDependencies.okHttp
    implementation mobileUiDependencies.okHttpLogger
    implementation mobileUiDependencies.jodaTime
    implementation mobileUiDependencies.retrofit
    implementation mobileUiDependencies.retrofitConverter
    implementation mobileUiDependencies.retrofitAdapter

    implementation(mobileUiDependencies.jodaGsonSerializer) {
        exclude group: 'joda-time', module: 'joda-time'
    }

    testImplementation mobileUiTestDependencies.kotlinJUnit

    kapt mobileUiDependencies.daggerCompiler
    kapt mobileUiDependencies.daggerProcessor
    compileOnly mobileUiDependencies.glassfishAnnotation

    // Instrumentation test dependencies
    androidTestImplementation mobileUiTestDependencies.junit
    androidTestImplementation mobileUiTestDependencies.mockito
    androidTestImplementation mobileUiTestDependencies.mockitoAndroid
    androidTestImplementation(mobileUiTestDependencies.espressoCore) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(mobileUiTestDependencies.androidRunner) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(mobileUiTestDependencies.androidRules) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(mobileUiTestDependencies.espressoIntents) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(mobileUiTestDependencies.espressoContrib) {
        exclude module: 'appcompat'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }
    kaptTest mobileUiDependencies.daggerCompiler
    kaptAndroidTest mobileUiDependencies.daggerCompiler
}

apply plugin: 'com.google.gms.google-services'